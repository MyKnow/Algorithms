import Foundation

// 원래 시도
// 1. 처음엔 소수 집합을 구하고, 원본 집합과의 차집합을 구함.
// 2. 이렇게 구해진 차집합에서 제곱수를 찾는 함수를 거쳐서 길이를 구함.
// 3. 이렇게 했을 때 메모리를 장난아니게 (21억 바이트) 사용해서 포기함.
// -> 다시 생각해보니, 약수 개수가 홀수인 수는 제곱수 밖에 없다.
// -> 그래서 입력 받은 n까지 중에서 가장 큰 제곱수의 제곱근을 출력하기만 하면 된다.

// [Int] N (immutable): 창문의 개수 (범위(자연수): 1 ≤ N ≤ 2,100,000,000)
let N: Int = Int(readLine() ?? "1") ?? 1

// N의 제곱근 내림 출력
print(Int(Double(N).squareRoot()))