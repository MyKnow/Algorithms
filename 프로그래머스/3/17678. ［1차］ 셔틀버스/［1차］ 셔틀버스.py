# 셔틀 -> 09:00부터 n회 t분 간격으로 역에 도착하며, 한 번에 m명의 승객 탑승 가능
# : 셔틀이 도착한 순간에 대기열에 선 크루까지 포함하여 대기 순서대로 태우고 바로 출발(09:00에 줄 선 크루도 탈 수 있음)
#
# !: 콘은 동시간대 다른 크루보다 우선순위가 낮다.
#
# 출력: 콘이 셔틀을 타고 사무실로 갈 수 있는 제일 늦은 도착 시각(HH:MM, 00:00 ~ 23:59)
# 
# 예제 분석
# 1. 09:00에 정원 5 버스 하나만 있지만, 크루가 총 4명이라 09:00에 도착해도 탈 수 있다.
# 2. 09:00부터 정원 2 버스가 2대 있어서 09:10 버스에 타야 하나, 09:10에 도착하면 [09:09, 09:10] 크루가 이미 존재하여 탈 수 없기에 09:09에 도착해야 한다.
# 3. 정원 2인 09:00, 09:10 버스에 타기 위해선 모든 크루보다 빠른 08:59에 도착해야 한다.
# 4. 09:00 버스에 타기 위해 모든 크루보다 빠른 00:00에 도착해야 한다.
# 5. 09:00 버스 하나 밖에 없고 이보다 빠르거나 같은 크루가 없으므로 정시에 도착해야 한다.
# 6. 최대한 늦게 타기 위해 10회차인 18:00 버스에 타야 한다.
#
# 고려
# 1. 버스 차편 중에서 가장 늦은 차편을 타야 한다.
# 2. 가장 늦은 차편에 탈 수 없는 경우, 가장 늦게 타는 크루보다 1분 빨리 탄다.

from collections import deque

def to_min(s):
    h, m = s.split(":")
    return int(h)*60 + int(m)

def to_hm(i):
    return f"{i//60:02d}:{i%60:02d}"
    
def solution(n, t, m, timetable):
    crew = sorted(map(to_min, timetable))
    shuttle = to_min("09:00")
    idx = 0
    last_boarded = None

    for i in range(n):
        # cap: 여유 공간
        cap = m
        # 셔틀 시간 전에 도착한 크루를 탑승시킨다.
        boarded = []
        
        # 빈 자리가 있고, 셔틀 도착했을 때 있던 크루인 경우 탑승 시킴
        while cap > 0 and idx < len(crew) and crew[idx] <= shuttle:
            boarded.append(crew[idx])
            idx += 1
            cap -= 1
            
        # 마지막 크루까지 진행했을 때
        if i == n-1:
            # 좌석이 남는 다면
            if len(boarded) < m:
                # 셔틀 시간에 맞춰 탑승할 수 있음
                return to_hm(shuttle)
            # 좌석이 남지 않는다면
            else:
                # 마지막 탑승자보다 1분 빨리 도착해야 한다.
                return to_hm(boarded[-1]-1)
            
        # 다음 셔틀
        shuttle += t